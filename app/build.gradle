//apply plugin:
//apply plugin:
//apply plugin: 'kotlin-android-extensions'
//apply plugin:
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "kotlin-parcelize"
    id "kotlinx-serialization"
}

apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.crashlytics'
//apply plugin: "androidx.navigation.safeargs.kotlin"


// See:
// https://stackoverflow.com/questions/37101589/how-to-read-a-properties-files-and-use-the-values-in-project-gradle-script/37101792
// https://stackoverflow.com/questions/45586839/android-read-build-gradle-properties-inside-class
// https://medium.com/@abhi007tyagi/storing-api-keys-using-android-ndk-6abb0adcadad
def props = new Properties()
file("$rootDir/config.properties").withInputStream { props.load(it) }

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keystore.properties file.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Loads the keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//androidExtensions {
//    experimental = true
//}

android {
    // minSdkVersion <= targetSdkVersion <= compileSdkVersion
    compileSdkVersion 32
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        kotlinOptions.useIR = true
    }
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    defaultConfig {
        applicationId "com.ft.ftchinese"
        minSdkVersion 21
        // Target sdk version 30 cannot call wechat SDK.
        // See https://open.weixin.qq.com/cgi-bin/announce?action=getannouncement&key=11600155960jI9EY&version=&lang=zh_CN&token=
        targetSdkVersion 32
        versionCode 91
        versionName "6.3.1"

        setProperty("archivesBaseName", "ftchinese-v$versionName")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "WX_SUBS_APPID", props.getProperty("wechat.subs.appId")

        buildConfigField "String", "BASE_URL_STANDARD", props.getProperty("base_url.standard")
        buildConfigField "String", "BASE_URL_PREMIUM", props.getProperty("base_url.premium")
        buildConfigField "String", "BASE_URL_B2B", props.getProperty("base_url.b2b")
        buildConfigField "String", "BASE_URL_FALLBACK", props.getProperty("base_url.fallback")

        buildConfigField "String", "API_CONTENT_LIVE", props.getProperty("api_url.content.live")
        buildConfigField "String", "API_SUBS_LIVE", props.getProperty("api_url.subs.live")
        buildConfigField "String", "API_SUBS_SANDBOX", props.getProperty("api_url.subs.sandbox")

        buildConfigField "String", "ACCESS_TOKEN_LIVE", props.getProperty("access_token.live")
        buildConfigField "String", "ACCESS_TOKEN_TEST", props.getProperty("access_token.test")

        buildConfigField "String", "CONVERSION_DEV_TOKEN", props.getProperty("conversion.dev_token")
        buildConfigField "String", "CONVERSION_LINK_ID", props.getProperty("conversion.link_id")

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
            }
        }
        // Export database schema to app/schemas directory.
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("$rootDir/android.jks")
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // Adds the "release" signing configuration to the release build type.
            signingConfig signingConfigs.release
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
//            minifyEnabled true
            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
//            shrinkResources true
            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            buildConfigField "String", "STRIPE_KEY", props.getProperty("stripe.live")
        }
        debug {
            debuggable true
            buildConfigField "String", "STRIPE_KEY", props.getProperty("stripe.test")
        }
    }

    flavorDimensions "appStore"
    productFlavors {
        // For google play. Take this as the official version.
        play {
            dimension "appStore"
        }
        huawei {
            dimension "appStore"
            versionNameSuffix "-huawei"
        }
        sanliuling {
            dimension "appStore"
            versionNameSuffix "-360"
        }
        ftc {
            dimension "appStore"
            versionNameSuffix "-ftc"
        }
        oppo {
            dimension "appStore"
            versionNameSuffix "-oppo"
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }
}

//kapt {
//    generateStubs = true
//}

dependencies {
    def room_version = '2.4.2'
    def lifecycle_version = "2.2.0"
    def work_version = "2.7.1"

    // Since 1.4.0: You no longer need to declare a dependency on the stdlib library in any Kotlin Gradle project, including a multiplatform one. The dependency is added by default.
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko:0.10.8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"

    // See https://firebase.google.com/support/release-notes/android
    // on how to install firebase as of 2021.04
    // Firebase
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:28.0.1')

    implementation 'com.google.firebase:firebase-iid'
    implementation 'com.google.firebase:firebase-messaging-ktx'
//    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation 'com.google.android.gms:play-services-analytics:18.0.1'
    implementation 'com.google.android.gms:play-services-base:18.0.1'

    // Payment
    implementation(name: 'alipaysdk-15.8.03.210428205839', ext: 'aar')
    implementation 'com.stripe:stripe-android:19.3.1'
    // Wechat
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.8.0'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"
    implementation "androidx.fragment:fragment-ktx:1.4.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.1"

    implementation 'androidx.work:work-runtime:2.7.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-gcm:$work_version"

    //  UI
    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "com.google.android.material:material:1.7.0-alpha01"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation "androidx.browser:browser:1.4.0"
    // The Support Library is a static library that you can add to your Android application in order to use APIs that are either not available for older platform versions or utility APIs that aren't a part of the framework APIs. Compatible on devices running API 14 or later.
    implementation "androidx.legacy:legacy-support-v4:$support_version"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.makeramen:roundedimageview:2.3.0"

    // Compose UI
    implementation "androidx.navigation:navigation-compose:2.4.2"
    // Animations
    implementation 'androidx.compose.animation:animation:1.1.1'
    implementation 'androidx.compose.ui:ui:1.1.1'
    // Tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling:1.1.1"
    implementation "androidx.compose.ui:ui-tooling-preview:1.1.1"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation 'androidx.compose.foundation:foundation:1.1.1'
    // Material Design
    implementation 'androidx.compose.material:material:1.1.1'
    // Material design icons
    implementation 'androidx.compose.material:material-icons-core:1.1.1'
//    implementation 'androidx.compose.material:material-icons-extended:1.1.1'
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.1'
    // Integration with observables
    implementation 'androidx.compose.runtime:runtime-livedata:1.1.1'
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.0"
    implementation "com.google.accompanist:accompanist-swiperefresh:0.24.7-alpha"
    implementation "com.google.accompanist:accompanist-webview:0.24.7-alpha"
    implementation 'com.radusalagean:info-bar-compose:1.0.0'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.1.1'

    // Image loading
    implementation 'com.github.bumptech.glide:glide:4.13.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.0'

    //  Network
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'

    // JSON
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'

    //  ORM
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-coroutines:2.1.0-alpha04"

    // Utilities
    implementation 'com.jakewharton.byteunits:byteunits:0.9.1'
    implementation 'org.threeten:threetenbp:1.6.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'

    implementation "io.noties.markwon:core:4.6.2"
    implementation 'com.github.jeziellago:compose-markdown:0.2.6'

    //    Test
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.github.javafaker:javafaker:1.0.1'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.5'
    testImplementation "androidx.room:room-testing:$room_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:2.1.0"
//    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
}

task zip(type: Zip, group: "Archive", description: "Archives sources in a zip file") {
    from("../") {
        include("config.properties", "android.jks", "keystore.properties", "app/google-services.json")
    }
    archiveFileName = "ftc-android.config.zip"
    destinationDirectory = file("build")
}

task copy(type: Copy, group: "Archive", description: "Copies sources to the dest directory") {
    from "build/ftc-android.config.zip"
    into "/Volumes/Zion/department/Tech/android-release"
}

task template(type: Copy, group: "Archive", description: "Copies html template files") {
    from("../../NewFTCApp-iOS/page/FTChinese") {
        include("gym.html", "list.html", "search.html", "story.html")
    }
    into "./src/main/res/raw"
}

