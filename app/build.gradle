//apply plugin:
//apply plugin:
//apply plugin: 'kotlin-android-extensions'
//apply plugin:
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id "kotlin-parcelize"
}
//apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "androidx.navigation.safeargs.kotlin"


// See:
// https://stackoverflow.com/questions/37101589/how-to-read-a-properties-files-and-use-the-values-in-project-gradle-script/37101792
// https://stackoverflow.com/questions/45586839/android-read-build-gradle-properties-inside-class
// https://medium.com/@abhi007tyagi/storing-api-keys-using-android-ndk-6abb0adcadad
def props = new Properties()
file("$rootDir/config.properties").withInputStream { props.load(it) }

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keystore.properties file.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Loads the keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

//androidExtensions {
//    experimental = true
//}

android {
    compileSdkVersion 30
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.0.0-beta01'
    }
    defaultConfig {
        applicationId "com.ft.ftchinese"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 57
        versionName "4.0.2"

        setProperty("archivesBaseName", "ftchinese-v$versionName")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "WX_SUBS_APPID", props.getProperty("wechat.subs.appId")

        buildConfigField "String", "BASE_URL_STANDARD", props.getProperty("base_url.standard")
        buildConfigField "String", "BASE_URL_PREMIUM", props.getProperty("base_url.premium")
        buildConfigField "String", "BASE_URL_B2B", props.getProperty("base_url.b2b")
        buildConfigField "String", "BASE_URL_FALLBACK", props.getProperty("base_url.fallback")

        buildConfigField "String", "API_READER_LIVE", props.getProperty("api_url.reader.live")
        buildConfigField "String", "API_CONTENT_LIVE", props.getProperty("api_url.content.live")
        buildConfigField "String", "API_SUBS_LIVE", props.getProperty("api_url.subs.live")
        buildConfigField "String", "API_SUBS_SANDBOX", props.getProperty("api_url.subs.sandbox")

        buildConfigField "String", "ACCESS_TOKEN_LIVE", props.getProperty("access_token.live")
        buildConfigField "String", "ACCESS_TOKEN_TEST", props.getProperty("access_token.test")

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
            }
        }
        // Export database schema to app/schemas directory.
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file("$rootDir/android.jks")
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // Adds the "release" signing configuration to the release build type.
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            buildConfigField "String", "STRIPE_KEY", props.getProperty("stripe.live")
        }
        debug {
            debuggable true
            buildConfigField "String", "STRIPE_KEY", props.getProperty("stripe.test")
        }
    }

    flavorDimensions "appStore"
    productFlavors {
        // For google play. Take this as the official version.
        play {
            dimension "appStore"
        }
        huawei {
            dimension "appStore"
            versionNameSuffix "-huawei"
        }
        sanliuling {
            dimension "appStore"
            versionNameSuffix "-360"
        }
        ftc {
            dimension "appStore"
            versionNameSuffix "-ftc"
        }
        samsung {
            dimension "appStore"
            versionNameSuffix "-samsung"
        }
        anzhi {
            dimension "appStore"
            versionNameSuffix "-anzhi"
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }
}

//kapt {
//    generateStubs = true
//}

dependencies {
    def room_version = '2.2.5'
    def lifecycle_version = "2.2.0"
    def exo_player = "2.11.3"
    def work_version = "2.5.0"
    def compose_version = "1.0.0-beta01"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Firebase
    implementation 'com.google.firebase:firebase-core:18.0.0'
    implementation 'com.google.firebase:firebase-analytics:18.0.0'
    implementation 'com.google.firebase:firebase-iid:21.0.0'
    implementation 'com.google.firebase:firebase-messaging:21.0.0'
    implementation 'com.google.android.gms:play-services-analytics:17.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.0'

    // Payment
    implementation(name: 'alipaySdk-15.6.5-20190718211148', ext: 'aar')
    implementation 'com.stripe:stripe-android:16.1.1'


    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:1.2.5"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    implementation 'android.arch.work:work-runtime:1.0.1'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-gcm:$work_version"

    //  UI
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "com.google.android.material:material:1.3.0-alpha04"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.browser:browser:1.3.0"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.legacy:legacy-support-v4:$support_version"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.makeramen:roundedimageview:2.3.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
// Dynamic Feature Module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    implementation "androidx.compose.ui:ui:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose_version"
    // Material Design
    implementation "androidx.compose.material:material:$compose_version"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.3.0-alpha03'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha02'
    // Integration with observables
    implementation 'androidx.compose.runtime:runtime-livedata:1.0.0-beta01'
    implementation 'androidx.compose.runtime:runtime-rxjava2:1.0.0-beta01'

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.0.0-beta01'

    // ExoPlayer
    implementation "com.google.android.exoplayer:exoplayer:$exo_player"
    implementation "com.google.android.exoplayer:extension-mediasession:$exo_player"

    //  Network
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'

    // JSON
    implementation 'com.beust:klaxon:5.0.13'

    //  ORM
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-coroutines:2.1.0-alpha04"

    // Wechat
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.6.20'

    // Utilities
    implementation 'com.jakewharton.byteunits:byteunits:0.9.1'
    implementation 'org.threeten:threetenbp:1.4.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'

    implementation "io.noties.markwon:core:4.6.1"
    //    Test
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.github.javafaker:javafaker:1.0.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'org.hamcrest:hamcrest-junit:2.0.0.0'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation "androidx.room:room-testing:$room_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
}

apply plugin: 'com.google.gms.google-services'

task zip(type: Zip, group: "Archive", description: "Archives sources in a zip file") {
    from("../") {
        include("config.properties", "android.jks", "keystore.properties", "app/google-services.json")
    }
    archiveFileName = "ftc-android.config.zip"
    destinationDirectory = file("build")
}

task copy(type: Copy, group: "Archive", description: "Copies sources to the dest directory") {
    from "build/ftc-android.config.zip"
    into "/Volumes/Zion/department/Tech/android-release"
}
